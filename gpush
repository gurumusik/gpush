#!/usr/bin/env bash

# gpush: emoji commit + stash + push + auto PR + color output + extras

# --- CONFIG ---
JIRA_PROJECT_PREFIX="GID"
DEFAULT_REMOTE_BRANCH="dev"
ENABLE_REBASE=true
ENABLE_PR=true
PR_DELAY_SECONDS=3

# --- COLORS ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
RESET='\033[0m'

# --- Version Information ---
if [[ "$1" == "-v" || "$1" == "--version" || "$1" == "--v" ]]; then
  echo -e "${GREEN}Usage:${RESET}"
  echo "v1.1.0"
  echo ""
  exit 0
fi

# --- Help ---
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  echo -e "${YELLOW}Usage:${RESET}"
  echo "  gpush <type>[!] [scope] -m \"message\" [-b \"breaking change\"] [options]"
  echo ""
  echo -e "${YELLOW}Arguments:${RESET}"
  echo "  <type>            Commit type (see list below)"
  echo "  [scope]           Optional scope (e.g. auth, profile)"
  echo "  -m \"message\"      Commit message (required)"
  echo "  -b \"breaking\"     Description of breaking change (optional)"
  echo ""
  echo -e "${YELLOW}Options:${RESET}"
  echo "  --to <branch>     Push to a specific remote branch (default: current branch)"
  echo "  --no-rebase       Skip rebase before commit"
  echo "  --no-pr           Skip automatic Pull Request creation"
  echo "  -h, --help        Show this help message"
  echo ""
  echo -e "${YELLOW}Examples:${RESET}"
  echo "  gpush feat profile -m \"add profile page UI\""
  echo "  gpush fix! auth -m \"remove legacy auth\" -b \"Token-based login removed\""
  echo "  gpush chore deps -m \"update dependencies\" --to staging --no-pr"
  echo ""
  echo -e "${YELLOW}Commit Types:${RESET}"
  echo "  ‚ú®  feat       ‚Üí New feature"
  echo "  üêõ  fix        ‚Üí Bug fix"
  echo "  üìù  docs       ‚Üí Documentation only"
  echo "  üé®  style      ‚Üí Code style changes (no logic)"
  echo "  ‚ôªÔ∏è   refactor   ‚Üí Code restructuring"
  echo "  ‚úÖ  test       ‚Üí Add or update tests"
  echo "  üîß  chore      ‚Üí Maintenance or tooling"
  echo "  ‚ö°Ô∏è  perf       ‚Üí Performance improvement"
  echo "  ü§ñ  ci         ‚Üí CI/CD configuration"
  echo "  üèó  build      ‚Üí Build system or dependencies"
  echo "  ‚è™  revert     ‚Üí Revert previous commits"
  echo "  üöß  wip        ‚Üí Work in progress"
  echo "  üéâ  init       ‚Üí Initial commit / setup"
  echo "  üîÄ  merge      ‚Üí Merge branches"
  echo "  ü©π  hotfix     ‚Üí Quick patch for production"
  echo "  üß™  temp       ‚Üí Temporary commit (debug/test)"
  echo "  ‚öôÔ∏è  config     ‚Üí Configuration update"
  echo "  ‚¨ÜÔ∏è  update     ‚Üí Version or dependency update"
  echo "  üîí  security   ‚Üí Security fix or patch"
  echo "  üöö  move       ‚Üí Move files or functions"
  echo "  üî•  remove     ‚Üí Remove code/files/features"
  echo ""
  echo -e "${YELLOW}üìò Tips:${RESET}"
  echo -e "   ${BLUE}git status${RESET}       ‚Üí Check current changes"
  echo -e "   ${BLUE}git log --oneline${RESET} ‚Üí View commit history"
  echo -e "   ${BLUE}git stash list${RESET}    ‚Üí View saved stashes"
  exit 0
fi

# --- Input parsing ---
TYPE=$1
SCOPE=$2
shift 2

BREAKING=""
MESSAGE=""
CUSTOM_REMOTE_BRANCH=""
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -m)
      shift
      MESSAGE="$1"
      ;;
    -b)
      shift
      BREAKING="$1"
      ;;
    --to)
      shift
      CUSTOM_REMOTE_BRANCH="$1"
      ;;
    --no-rebase)
      ENABLE_REBASE=false
      ;;
    --no-pr)
      ENABLE_PR=false
      ;;
    *)
      echo -e "${RED}‚ùå Unknown option:${RESET} $1"
      exit 1
      ;;
  esac
  shift
done

# --- Validate inputs ---
if [[ -z "$TYPE" || -z "$MESSAGE" ]]; then
  echo -e "${RED}‚ùå Missing type or message.${RESET}"
  exit 1
fi

if [[ "$TYPE" =~ ! ]]; then
  IS_BREAKING=true
  TYPE="${TYPE//!/}"
else
  IS_BREAKING=false
fi

# --- Type Icons ---
declare -A TYPE_ICONS=(
  [feat]="‚ú®"
  [fix]="üêõ"
  [docs]="üìù"
  [style]="üé®"
  [refactor]="‚ôªÔ∏è"
  [test]="‚úÖ"
  [chore]="üîß"
  [perf]="‚ö°Ô∏è"
  [ci]="ü§ñ"
  [build]="üèó"
  [revert]="‚è™"
  [wip]="üöß"
  [init]="üéâ"
  [merge]="üîÄ"
  [hotfix]="ü©π"
  [temp]="üß™"
  [config]="‚öôÔ∏è"
  [update]="‚¨ÜÔ∏è"
  [security]="üîí"
  [move]="üöö"
  [remove]="üî•"
)

if [[ -z "${TYPE_ICONS[$TYPE]}" ]]; then
  echo -e "${RED}‚ùå Invalid type:${RESET} $TYPE"
  echo -e "${YELLOW}Valid types:${RESET} ${!TYPE_ICONS[@]}"
  exit 1
fi

ICON="${TYPE_ICONS[$TYPE]}"
[[ -n "$SCOPE" ]] && SCOPE_FORMATTED="(${SCOPE})"

# --- Branch Info ---
LOCAL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
REMOTE_BRANCH="${CUSTOM_REMOTE_BRANCH:-$LOCAL_BRANCH}"

# --- Extract JIRA ID ---
if [[ "$LOCAL_BRANCH" =~ ($JIRA_PROJECT_PREFIX-[0-9]+) ]]; then
  TICKET_ID="${BASH_REMATCH[1]}"
  MESSAGE="$TICKET_ID $MESSAGE"
fi

# --- Compose Commit Message ---
COMMIT_MSG="$ICON $TYPE$SCOPE_FORMATTED: $MESSAGE"
[[ "$IS_BREAKING" == true ]] && COMMIT_MSG="$ICON $TYPE$SCOPE_FORMATTED!: $MESSAGE"
[[ -n "$BREAKING" ]] && COMMIT_MSG="$COMMIT_MSG\n\nBREAKING CHANGE: $BREAKING"

# --- Check if local branch exists remotely ---
echo -e "${BLUE}üîç Checking if remote branch exists...${RESET}"
if ! git ls-remote --exit-code --heads origin "$LOCAL_BRANCH" &>/dev/null; then
  echo -e "${YELLOW}‚ö†Ô∏è Remote branch '$LOCAL_BRANCH' does not exist. It will be created on push.${RESET}"
else
  echo -e "${GREEN}‚úÖ Remote branch already exists.${RESET}"
fi

# --- Git Stash ---
echo -e "${BLUE}üì¶ Stashing local changes...${RESET}"
if ! git stash -u; then
  echo -e "${RED}‚ùå Failed to stash local changes.${RESET}"
  echo -e "${YELLOW}üí° Tip:${RESET} Ensure you're inside a valid Git repository and there are no unresolved conflicts."
  exit 1
fi

# --- Rebase ---
if [[ "$ENABLE_REBASE" == true ]]; then
  echo -e "${BLUE}üì• Fetching updates from origin/${REMOTE_BRANCH}...${RESET}"
  if ! git fetch origin "$REMOTE_BRANCH"; then
    echo -e "${RED}‚ùå Failed to fetch from origin/${REMOTE_BRANCH}.${RESET}"
    echo -e "${YELLOW}üí° Tip:${RESET} Ensure the branch '${REMOTE_BRANCH}' exists and your internet connection is active."
    exit 1
  fi

  echo -e "${BLUE}üîÑ Rebasing onto origin/${REMOTE_BRANCH}...${RESET}"
  if ! git rebase origin/"$REMOTE_BRANCH"; then
    echo -e "${RED}‚ùå Rebase failed due to conflicts.${RESET}"
    echo -e "${YELLOW}üí° Tip:${RESET} Run:"
    echo -e "   ${BLUE}git status${RESET} ‚Üí To view conflicting files"
    echo -e "   Resolve them manually, then run:"
    echo -e "   ${BLUE}git rebase --continue${RESET} or ${BLUE}git rebase --abort${RESET}"
    exit 1
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è Skipping rebase (you used --no-rebase).${RESET}"
fi

# --- Apply Stash ---
echo -e "${BLUE}üìÇ Reapplying stashed changes...${RESET}"
if ! git stash pop; then
  echo -e "${YELLOW}‚ö†Ô∏è Nothing to pop from stash, or merge conflicts occurred.${RESET}"
  echo -e "${YELLOW}üí° Tip:${RESET} If you see conflicts, resolve them and commit manually."
fi

# --- Final Commit ---
echo -e "${BLUE}üìù Staging files...${RESET}"
git add .

echo -e "${BLUE}üìù Committing changes...${RESET}"
if ! git commit -m "$COMMIT_MSG"; then
  echo -e "${RED}‚ùå Commit failed.${RESET}"
  echo -e "${YELLOW}üí° Tip:${RESET} Likely no changes were detected. Run ${BLUE}git status${RESET} to confirm."
  exit 1
fi

# --- Show Commit Message ---
echo -e "${GREEN}‚úÖ Final Commit Message:${RESET}"
echo -e "------------------------------------------------"
echo -e "$COMMIT_MSG"
echo -e "------------------------------------------------"

# --- Push ---
echo -e "${BLUE}üöÄ Pushing to origin/${REMOTE_BRANCH}...${RESET}"
if ! git push origin "$LOCAL_BRANCH:$REMOTE_BRANCH"; then
  echo -e "${RED}‚ùå Push failed to origin/${REMOTE_BRANCH}.${RESET}"
  echo -e "${YELLOW}üí° Tip:${RESET} Make sure you have push access, or try:"
  echo -e "   ${BLUE}git pull --rebase${RESET} then retry."
  exit 1
fi

echo -e "${GREEN}‚úÖ Code successfully pushed to origin/${REMOTE_BRANCH}!${RESET}"

# --- Auto Pull Request ---
if [[ "$ENABLE_PR" == true ]]; then
  if command -v gh &> /dev/null; then
    echo -e "${BLUE}üì¶ Creating Pull Request using GitHub CLI...${RESET}"
    sleep $PR_DELAY_SECONDS
    if ! gh pr create --base "$REMOTE_BRANCH" --head "$LOCAL_BRANCH" --title "$COMMIT_MSG" --body "" --web; then
      echo -e "${RED}‚ùå Failed to create Pull Request via GitHub CLI.${RESET}"
      echo -e "${YELLOW}üí° Tip:${RESET} Make sure you're authenticated. Try:"
      echo -e "   ${BLUE}gh auth login${RESET}"
      exit 1
    fi
    echo -e "${GREEN}üöÄ Pull Request opened in your browser!${RESET}"
  else
    echo -e "${YELLOW}‚ö†Ô∏è GitHub CLI (gh) not installed.${RESET}"
    echo -e "${YELLOW}üí° Tip:${RESET} Install it using:"
    echo -e "   ${BLUE}brew install gh${RESET} or visit https://cli.github.com"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è Pull Request creation skipped (--no-pr flag).${RESET}"
fi